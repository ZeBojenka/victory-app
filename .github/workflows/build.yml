name: Build APK
on: [push]
jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          unzip openjdk-17-jdk git autoconf libtool pkg-config \
          zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 \
          cmake libffi-dev libssl-dev python3-dev python3-venv \
          ffmpeg
        
        # Создаем правильную структуру Android SDK
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        mkdir -p android-sdk
        unzip cmdline-tools.zip -d android-sdk/cmdline-tools
        mv android-sdk/cmdline-tools/cmdline-tools android-sdk/cmdline-tools/latest
        rm cmdline-tools.zip
        
        # Настраиваем переменные окружения
        echo "ANDROID_SDK_ROOT=$PWD/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$PWD/android-sdk" >> $GITHUB_ENV
        echo "PATH=$PWD/android-sdk/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV
    
    - name: Set up Android SDK
      run: |
        # Принимаем лицензии
        yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT
        
        # Устанавливаем необходимые компоненты
        sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0" "build-tools;36.0.0" --sdk_root=$ANDROID_SDK_ROOT
        
        # Проверяем установку
        sdkmanager --list --sdk_root=$ANDROID_SDK_ROOT
    
    - name: Set up Python environment
      run: |
        python3 -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV
        echo "PATH=$PWD/venv/bin:$PATH" >> $GITHUB_ENV
        pip install --upgrade pip wheel setuptools
    
    - name: Install Python dependencies
      run: |
        source venv/bin/activate
        pip install cython buildozer plyer kivy
        pip install "setuptools<67.0"
        pip install git+https://github.com/kivy/python-for-android.git@master
    
    - name: Configure Buildozer
      run: |
        # Создаем buildozer.spec с правильными настройками
        cat <<EOF > buildozer.spec
        [app]
        title = VictoryApp
        package.name = victoryapp
        package.domain = org.example
        source.dir = .
        source.include_exts = py,wav
        version = 1.0
        requirements = python3,kivy==2.1.0,plyer,setuptools,cython
        orientation = portrait
        fullscreen = 0
        android.permissions = INTERNET
        android.api = 34
        android.minapi = 21
        android.ndk = 23b
        android.sdk_path = $GITHUB_WORKSPACE/android-sdk
        android.build_tools_version = 34.0.0
        android.archs = armeabi-v7a  # Исправлено на archs
        android.allow_backup = False
        p4a.branch = master
        
        # Явно указываем путь к sdkmanager
        android.sdkmanager = $GITHUB_WORKSPACE/android-sdk/cmdline-tools/latest/bin/sdkmanager
        EOF
        
        # Конвертируем звук
        ffmpeg -i victory.wav -acodec pcm_s16le -ar 44100 -ac 1 victory_fixed.wav
        mv victory_fixed.wav victory.wav
    
    - name: Build APK
      run: |
        source venv/bin/activate
        
        # Явно указываем путь к SDK для Buildozer
        export ANDROID_SDK_ROOT=$GITHUB_WORKSPACE/android-sdk
        export ANDROID_HOME=$GITHUB_WORKSPACE/android-sdk
        
        # Создаем необходимые директории
        mkdir -p .buildozer/android/platform/python-for-android
        mkdir -p bin
        
        # Обновляем Buildozer до последней версии
        pip install --upgrade buildozer
        
        buildozer android clean
        buildozer -v android debug
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: victory-app
        path: bin/*.apk
        retention-days: 1
